import {
  f,
  t
} from "./chunk-G4H3BDN2.js";
import {
  appendErrors
} from "./chunk-D5JX3BSV.js";
import "./chunk-5SDAPIJE.js";
import "./chunk-TWLJ45QX.js";

// node_modules/@hookform/resolvers/zod/dist/zod.module.js
var n = function(e, o) {
  for (var n2 = {}; e.length; ) {
    var s2 = e[0], t2 = s2.code, i = s2.message, a = s2.path.join(".");
    if (!n2[a])
      if ("unionErrors" in s2) {
        var u = s2.unionErrors[0].errors[0];
        n2[a] = { message: u.message, type: u.code };
      } else
        n2[a] = { message: i, type: t2 };
    if ("unionErrors" in s2 && s2.unionErrors.forEach(function(r) {
      return r.errors.forEach(function(r2) {
        return e.push(r2);
      });
    }), o) {
      var c = n2[a].types, f2 = c && c[s2.code];
      n2[a] = appendErrors(a, o, n2, t2, f2 ? [].concat(f2, s2.message) : s2.message);
    }
    e.shift();
  }
  return n2;
};
var s = function(r, s2, t2) {
  return void 0 === t2 && (t2 = {}), function(i, a, u) {
    try {
      return Promise.resolve(function(o, n2) {
        try {
          var a2 = Promise.resolve(r["sync" === t2.mode ? "parse" : "parseAsync"](i, s2)).then(function(r2) {
            return u.shouldUseNativeValidation && t({}, u), { errors: {}, values: t2.rawValues ? i : r2 };
          });
        } catch (r2) {
          return n2(r2);
        }
        return a2 && a2.then ? a2.then(void 0, n2) : a2;
      }(0, function(r2) {
        return { values: {}, errors: r2.isEmpty ? {} : f(n(r2.errors, !u.shouldUseNativeValidation && "all" === u.criteriaMode), u) };
      }));
    } catch (r2) {
      return Promise.reject(r2);
    }
  };
};
export {
  s as zodResolver
};
//# sourceMappingURL=@hookform_resolvers_zod.js.map
