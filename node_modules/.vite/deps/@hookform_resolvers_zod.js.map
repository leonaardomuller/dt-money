{
  "version": 3,
  "sources": ["../../@hookform/resolvers/zod/src/zod.ts"],
  "sourcesContent": ["import {\n  appendErrors,\n  FieldError,\n  FieldErrors,\n} from 'react-hook-form';\nimport { z } from 'zod';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport type { Resolver } from './types';\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length;) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n    async (values, _, options) => {\n      try {\n        const data = await schema[\n          resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n        ](values, schemaOptions);\n\n        options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n        return {\n          errors: {} as FieldErrors,\n          values: resolverOptions.rawValues ? values : data,\n        };\n      } catch (error: any) {\n        return {\n          values: {},\n          errors: error.isEmpty\n            ? {}\n            : toNestError(\n              parseErrorSchema(\n                error.errors,\n                !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n              ),\n              options,\n            ),\n        };\n      }\n    };\n"],
  "mappings": ";;;;;;;;;;;AASA,IAAMA,IAAmB,SACvBC,GACAC,GAAAA;AAGA,WADMC,KAAqC,CAAA,GACpCF,EAAUG,UAAS;AACxB,QAAMC,KAAQJ,EAAU,IAChBK,KAAwBD,GAAxBC,MAAMC,IAAkBF,GAAlBE,SACRC,IAD0BH,GAATI,KACJC,KAAK,GAAA;AAExB,QAAA,CAAKP,GAAOK;AACV,UAAI,iBAAiBH,IAAO;AAC1B,YAAMM,IAAaN,GAAMO,YAAY,GAAGT,OAAO;AAE/CA,QAAAA,GAAOK,KAAS,EACdD,SAASI,EAAWJ,SACpBM,MAAMF,EAAWL,KAAAA;MAAAA;AAGnBH,QAAAA,GAAOK,KAAS,EAAED,SAAAA,GAASM,MAAMP,GAAAA;AAUrC,QANI,iBAAiBD,MACnBA,GAAMO,YAAYE,QAAQ,SAACH,GAAAA;AAAAA,aACzBA,EAAWR,OAAOW,QAAQ,SAACC,IAAAA;AAAAA,eAAMd,EAAUe,KAAKD,EAAAA;MAAAA,CAAAA;IAAAA,CAAAA,GAIhDb,GAA0B;AAC5B,UAAMe,IAAQd,GAAOK,GAAOS,OACtBC,KAAWD,KAASA,EAAMZ,GAAMC;AAEtCH,MAAAA,GAAOK,KAASW,aACdX,GACAN,GACAC,IACAG,IACAY,KACK,CAAA,EAAgBE,OAAOF,IAAsBb,GAAME,OAAAA,IACpDF,GAAME,OAAAA;IAAAA;AAIdN,MAAUoB,MAAAA;EAAAA;AAGZ,SAAOlB;AAAAA;AA/CT,IAkDamB,IACX,SAACC,GAAQC,IAAeC,IAAAA;AAAAA,SAAAA,WAAAA,OAAAA,KAAkB,CAAA,IAAA,SACjCC,GAAQC,GAAGC,GAAAA;AAAAA,QAAAA;AAAAA,aAAAA,QAAAA,QAAAA,SAAAA,GAAAA,IAAAA;AAAAA,YAAAA;AAAAA,cAAAA,KAAAA,QAAAA,QAEKL,EACQ,WAAzBE,GAAgBI,OAAkB,UAAU,cAC5CH,GAAQF,EAAAA,CAAAA,EAAAA,KAAAA,SAFJM,IAAAA;AAMN,mBAFAF,EAAQG,6BAA6BC,EAAuB,CAAA,GAAIJ,CAAAA,GAEzD,EACLzB,QAAQ,CAAA,GACRuB,QAAQD,GAAgBQ,YAAYP,IAASI,GAAAA;UAAAA,CAAAA;QAAAA,SAAAA,IAAAA;AAAAA,iBAAAA,GAAAA,EAAAA;QAAAA;AAAAA,eAAAA,MAAAA,GAAAA,OAAAA,GAAAA,KAAAA,QAAAA,EAAAA,IAAAA;MAAAA,EAAAA,GAAAA,SAExCzB,IAAAA;AACP,eAAO,EACLqB,QAAQ,CAAA,GACRvB,QAAQE,GAAM6B,UACV,CAAA,IACAC,EACAnC,EACEK,GAAMF,QAAAA,CACLyB,EAAQG,6BACgB,UAAzBH,EAAQQ,YAAAA,GAEVR,CAAAA,EAAAA;MAAAA,CAAAA,CAAAA;IAAAA,SAxBZS,IAAA;AAAA,aAAA,QAAA,OAAAA,EAAA;IAAA;EAAA;AAAA;",
  "names": ["parseErrorSchema", "zodErrors", "validateAllFieldCriteria", "errors", "length", "error", "code", "message", "_path", "path", "join", "unionError", "unionErrors", "type", "forEach", "e", "push", "types", "messages", "appendErrors", "concat", "shift", "zodResolver", "schema", "schemaOptions", "resolverOptions", "values", "_", "options", "mode", "data", "shouldUseNativeValidation", "validateFieldsNatively", "rawValues", "isEmpty", "toNestError", "criteriaMode", "r"]
}
