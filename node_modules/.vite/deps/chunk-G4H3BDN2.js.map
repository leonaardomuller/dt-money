{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestError.ts"],
  "sourcesContent": ["import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"],
  "mappings": ";;;;;;AAIA,IAAMA,IAAoB,SAACC,GAAUC,IAAmBC,IAAAA;AACtD,MAAIF,KAAO,oBAAoBA,GAAK;AAClC,QAAMG,KAAQC,IAAIF,IAAQD,EAAAA;AAC1BD,MAAID,kBAAmBI,MAASA,GAAME,WAAY,EAAA,GAElDL,EAAIM,eAAAA;EAAAA;AAAAA;AALR,IAUaC,IAAyB,SACpCL,GACAM,GAAAA;AAAAA,MAAAA,KAAAA,SAIWP,IAAAA;AACT,QAAMQ,KAAQD,EAAQE,OAAOT;AACzBQ,IAAAA,MAASA,GAAMT,OAAO,oBAAoBS,GAAMT,MAClDD,EAAkBU,GAAMT,KAAKC,IAAWC,CAAAA,IAC/BO,GAAME,QACfF,GAAME,KAAKC,QAAQ,SAACZ,IAAAA;AAAAA,aAA0BD,EAAkBC,IAAKC,IAAWC,CAAAA;IAAAA,CAAAA;EAAAA;AALpF,WAAWD,MAAaO,EAAQE;AAAAA,IAAAA,GAArBT,EAAAA;AAAAA;AAhBb,ICKaY,IAAc,SACzBX,IACAM,IAAAA;AAEAA,EAAAA,GAAQM,6BAA6BP,EAAuBL,IAAQM,EAAAA;AAEpE,MAAMO,IAAc,CAAA;AACpB,WAAWC,KAAQd,IAAQ;AACzB,QAAMO,IAAQL,IAAII,GAAQE,QAAQM,CAAAA;AAElCC,QACEF,GACAC,GACAE,OAAOC,OAAOjB,GAAOc,IAAO,EAAEhB,KAAKS,KAASA,EAAMT,IAAAA,CAAAA,CAAAA;EAAAA;AAItD,SAAOe;AAAAA;",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "field", "fields", "refs", "forEach", "toNestError", "shouldUseNativeValidation", "fieldErrors", "path", "set", "Object", "assign"]
}
